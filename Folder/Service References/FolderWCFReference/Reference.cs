//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace HuaweiSoftware.Folder.FolderWCFReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FolderWCFReference.IFolderWCF")]
    public interface IFolderWCF {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFolderWCF/AddListToDB", ReplyAction="http://tempuri.org/IFolderWCF/AddListToDBResponse")]
        System.IAsyncResult BeginAddListToDB(System.Collections.Generic.List<System.Collections.Generic.List<string>> folders, System.AsyncCallback callback, object asyncState);
        
        int EndAddListToDB(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFolderWCF/Exists", ReplyAction="http://tempuri.org/IFolderWCF/ExistsResponse")]
        System.IAsyncResult BeginExists(string path, string name, System.AsyncCallback callback, object asyncState);
        
        bool EndExists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFolderWCF/GetId", ReplyAction="http://tempuri.org/IFolderWCF/GetIdResponse")]
        System.IAsyncResult BeginGetId(System.AsyncCallback callback, object asyncState);
        
        int EndGetId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFolderWCF/GetDirListFromDB", ReplyAction="http://tempuri.org/IFolderWCF/GetDirListFromDBResponse")]
        System.IAsyncResult BeginGetDirListFromDB(string path, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<System.Collections.Generic.List<string>> EndGetDirListFromDB(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFolderWCF/GetFileListFromDB", ReplyAction="http://tempuri.org/IFolderWCF/GetFileListFromDBResponse")]
        System.IAsyncResult BeginGetFileListFromDB(string path, System.Nullable<int> PID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<System.Collections.Generic.List<string>> EndGetFileListFromDB(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFolderWCFChannel : HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddListToDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddListToDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDirListFromDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDirListFromDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.List<string>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<System.Collections.Generic.List<string>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileListFromDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileListFromDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.List<string>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<System.Collections.Generic.List<string>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FolderWCFClient : System.ServiceModel.ClientBase<HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF>, HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF {
        
        private BeginOperationDelegate onBeginAddListToDBDelegate;
        
        private EndOperationDelegate onEndAddListToDBDelegate;
        
        private System.Threading.SendOrPostCallback onAddListToDBCompletedDelegate;
        
        private BeginOperationDelegate onBeginExistsDelegate;
        
        private EndOperationDelegate onEndExistsDelegate;
        
        private System.Threading.SendOrPostCallback onExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetIdDelegate;
        
        private EndOperationDelegate onEndGetIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDirListFromDBDelegate;
        
        private EndOperationDelegate onEndGetDirListFromDBDelegate;
        
        private System.Threading.SendOrPostCallback onGetDirListFromDBCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileListFromDBDelegate;
        
        private EndOperationDelegate onEndGetFileListFromDBDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileListFromDBCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FolderWCFClient() {
        }
        
        public FolderWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FolderWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FolderWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FolderWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<AddListToDBCompletedEventArgs> AddListToDBCompleted;
        
        public event System.EventHandler<ExistsCompletedEventArgs> ExistsCompleted;
        
        public event System.EventHandler<GetIdCompletedEventArgs> GetIdCompleted;
        
        public event System.EventHandler<GetDirListFromDBCompletedEventArgs> GetDirListFromDBCompleted;
        
        public event System.EventHandler<GetFileListFromDBCompletedEventArgs> GetFileListFromDBCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF.BeginAddListToDB(System.Collections.Generic.List<System.Collections.Generic.List<string>> folders, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddListToDB(folders, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF.EndAddListToDB(System.IAsyncResult result) {
            return base.Channel.EndAddListToDB(result);
        }
        
        private System.IAsyncResult OnBeginAddListToDB(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<System.Collections.Generic.List<string>> folders = ((System.Collections.Generic.List<System.Collections.Generic.List<string>>)(inValues[0]));
            return ((HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF)(this)).BeginAddListToDB(folders, callback, asyncState);
        }
        
        private object[] OnEndAddListToDB(System.IAsyncResult result) {
            int retVal = ((HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF)(this)).EndAddListToDB(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddListToDBCompleted(object state) {
            if ((this.AddListToDBCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddListToDBCompleted(this, new AddListToDBCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddListToDBAsync(System.Collections.Generic.List<System.Collections.Generic.List<string>> folders) {
            this.AddListToDBAsync(folders, null);
        }
        
        public void AddListToDBAsync(System.Collections.Generic.List<System.Collections.Generic.List<string>> folders, object userState) {
            if ((this.onBeginAddListToDBDelegate == null)) {
                this.onBeginAddListToDBDelegate = new BeginOperationDelegate(this.OnBeginAddListToDB);
            }
            if ((this.onEndAddListToDBDelegate == null)) {
                this.onEndAddListToDBDelegate = new EndOperationDelegate(this.OnEndAddListToDB);
            }
            if ((this.onAddListToDBCompletedDelegate == null)) {
                this.onAddListToDBCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddListToDBCompleted);
            }
            base.InvokeAsync(this.onBeginAddListToDBDelegate, new object[] {
                        folders}, this.onEndAddListToDBDelegate, this.onAddListToDBCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF.BeginExists(string path, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExists(path, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF.EndExists(System.IAsyncResult result) {
            return base.Channel.EndExists(result);
        }
        
        private System.IAsyncResult OnBeginExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string path = ((string)(inValues[0]));
            string name = ((string)(inValues[1]));
            return ((HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF)(this)).BeginExists(path, name, callback, asyncState);
        }
        
        private object[] OnEndExists(System.IAsyncResult result) {
            bool retVal = ((HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF)(this)).EndExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnExistsCompleted(object state) {
            if ((this.ExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExistsCompleted(this, new ExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExistsAsync(string path, string name) {
            this.ExistsAsync(path, name, null);
        }
        
        public void ExistsAsync(string path, string name, object userState) {
            if ((this.onBeginExistsDelegate == null)) {
                this.onBeginExistsDelegate = new BeginOperationDelegate(this.OnBeginExists);
            }
            if ((this.onEndExistsDelegate == null)) {
                this.onEndExistsDelegate = new EndOperationDelegate(this.OnEndExists);
            }
            if ((this.onExistsCompletedDelegate == null)) {
                this.onExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExistsCompleted);
            }
            base.InvokeAsync(this.onBeginExistsDelegate, new object[] {
                        path,
                        name}, this.onEndExistsDelegate, this.onExistsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF.BeginGetId(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetId(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF.EndGetId(System.IAsyncResult result) {
            return base.Channel.EndGetId(result);
        }
        
        private System.IAsyncResult OnBeginGetId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF)(this)).BeginGetId(callback, asyncState);
        }
        
        private object[] OnEndGetId(System.IAsyncResult result) {
            int retVal = ((HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF)(this)).EndGetId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetIdCompleted(object state) {
            if ((this.GetIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetIdCompleted(this, new GetIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetIdAsync() {
            this.GetIdAsync(null);
        }
        
        public void GetIdAsync(object userState) {
            if ((this.onBeginGetIdDelegate == null)) {
                this.onBeginGetIdDelegate = new BeginOperationDelegate(this.OnBeginGetId);
            }
            if ((this.onEndGetIdDelegate == null)) {
                this.onEndGetIdDelegate = new EndOperationDelegate(this.OnEndGetId);
            }
            if ((this.onGetIdCompletedDelegate == null)) {
                this.onGetIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetIdDelegate, null, this.onEndGetIdDelegate, this.onGetIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF.BeginGetDirListFromDB(string path, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDirListFromDB(path, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<System.Collections.Generic.List<string>> HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF.EndGetDirListFromDB(System.IAsyncResult result) {
            return base.Channel.EndGetDirListFromDB(result);
        }
        
        private System.IAsyncResult OnBeginGetDirListFromDB(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string path = ((string)(inValues[0]));
            return ((HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF)(this)).BeginGetDirListFromDB(path, callback, asyncState);
        }
        
        private object[] OnEndGetDirListFromDB(System.IAsyncResult result) {
            System.Collections.Generic.List<System.Collections.Generic.List<string>> retVal = ((HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF)(this)).EndGetDirListFromDB(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDirListFromDBCompleted(object state) {
            if ((this.GetDirListFromDBCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDirListFromDBCompleted(this, new GetDirListFromDBCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDirListFromDBAsync(string path) {
            this.GetDirListFromDBAsync(path, null);
        }
        
        public void GetDirListFromDBAsync(string path, object userState) {
            if ((this.onBeginGetDirListFromDBDelegate == null)) {
                this.onBeginGetDirListFromDBDelegate = new BeginOperationDelegate(this.OnBeginGetDirListFromDB);
            }
            if ((this.onEndGetDirListFromDBDelegate == null)) {
                this.onEndGetDirListFromDBDelegate = new EndOperationDelegate(this.OnEndGetDirListFromDB);
            }
            if ((this.onGetDirListFromDBCompletedDelegate == null)) {
                this.onGetDirListFromDBCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDirListFromDBCompleted);
            }
            base.InvokeAsync(this.onBeginGetDirListFromDBDelegate, new object[] {
                        path}, this.onEndGetDirListFromDBDelegate, this.onGetDirListFromDBCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF.BeginGetFileListFromDB(string path, System.Nullable<int> PID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileListFromDB(path, PID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<System.Collections.Generic.List<string>> HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF.EndGetFileListFromDB(System.IAsyncResult result) {
            return base.Channel.EndGetFileListFromDB(result);
        }
        
        private System.IAsyncResult OnBeginGetFileListFromDB(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string path = ((string)(inValues[0]));
            System.Nullable<int> PID = ((System.Nullable<int>)(inValues[1]));
            return ((HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF)(this)).BeginGetFileListFromDB(path, PID, callback, asyncState);
        }
        
        private object[] OnEndGetFileListFromDB(System.IAsyncResult result) {
            System.Collections.Generic.List<System.Collections.Generic.List<string>> retVal = ((HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF)(this)).EndGetFileListFromDB(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileListFromDBCompleted(object state) {
            if ((this.GetFileListFromDBCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileListFromDBCompleted(this, new GetFileListFromDBCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileListFromDBAsync(string path, System.Nullable<int> PID) {
            this.GetFileListFromDBAsync(path, PID, null);
        }
        
        public void GetFileListFromDBAsync(string path, System.Nullable<int> PID, object userState) {
            if ((this.onBeginGetFileListFromDBDelegate == null)) {
                this.onBeginGetFileListFromDBDelegate = new BeginOperationDelegate(this.OnBeginGetFileListFromDB);
            }
            if ((this.onEndGetFileListFromDBDelegate == null)) {
                this.onEndGetFileListFromDBDelegate = new EndOperationDelegate(this.OnEndGetFileListFromDB);
            }
            if ((this.onGetFileListFromDBCompletedDelegate == null)) {
                this.onGetFileListFromDBCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileListFromDBCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileListFromDBDelegate, new object[] {
                        path,
                        PID}, this.onEndGetFileListFromDBDelegate, this.onGetFileListFromDBCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF CreateChannel() {
            return new FolderWCFClientChannel(this);
        }
        
        private class FolderWCFClientChannel : ChannelBase<HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF>, HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF {
            
            public FolderWCFClientChannel(System.ServiceModel.ClientBase<HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAddListToDB(System.Collections.Generic.List<System.Collections.Generic.List<string>> folders, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = folders;
                System.IAsyncResult _result = base.BeginInvoke("AddListToDB", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddListToDB(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddListToDB", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginExists(string path, string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = path;
                _args[1] = name;
                System.IAsyncResult _result = base.BeginInvoke("Exists", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndExists(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Exists", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetId(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetId", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetId(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDirListFromDB(string path, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = path;
                System.IAsyncResult _result = base.BeginInvoke("GetDirListFromDB", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<System.Collections.Generic.List<string>> EndGetDirListFromDB(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<System.Collections.Generic.List<string>> _result = ((System.Collections.Generic.List<System.Collections.Generic.List<string>>)(base.EndInvoke("GetDirListFromDB", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileListFromDB(string path, System.Nullable<int> PID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = path;
                _args[1] = PID;
                System.IAsyncResult _result = base.BeginInvoke("GetFileListFromDB", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<System.Collections.Generic.List<string>> EndGetFileListFromDB(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<System.Collections.Generic.List<string>> _result = ((System.Collections.Generic.List<System.Collections.Generic.List<string>>)(base.EndInvoke("GetFileListFromDB", _args, result)));
                return _result;
            }
        }
    }
}
