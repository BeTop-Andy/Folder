//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace HuaweiSoftware.Folder.FolderWCFReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FolderWCFReference.IFolderWCF")]
    public interface IFolderWCF {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFolderWCF/AddFileToDB", ReplyAction="http://tempuri.org/IFolderWCF/AddFileToDBResponse")]
        System.IAsyncResult BeginAddFileToDB(int id, System.Nullable<int> pid, string fileName, long size, string ext, System.DateTime createTime, System.AsyncCallback callback, object asyncState);
        
        void EndAddFileToDB(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFolderWCFChannel : HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FolderWCFClient : System.ServiceModel.ClientBase<HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF>, HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF {
        
        private BeginOperationDelegate onBeginAddFileToDBDelegate;
        
        private EndOperationDelegate onEndAddFileToDBDelegate;
        
        private System.Threading.SendOrPostCallback onAddFileToDBCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FolderWCFClient() {
        }
        
        public FolderWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FolderWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FolderWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FolderWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddFileToDBCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF.BeginAddFileToDB(int id, System.Nullable<int> pid, string fileName, long size, string ext, System.DateTime createTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFileToDB(id, pid, fileName, size, ext, createTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF.EndAddFileToDB(System.IAsyncResult result) {
            base.Channel.EndAddFileToDB(result);
        }
        
        private System.IAsyncResult OnBeginAddFileToDB(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            System.Nullable<int> pid = ((System.Nullable<int>)(inValues[1]));
            string fileName = ((string)(inValues[2]));
            long size = ((long)(inValues[3]));
            string ext = ((string)(inValues[4]));
            System.DateTime createTime = ((System.DateTime)(inValues[5]));
            return ((HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF)(this)).BeginAddFileToDB(id, pid, fileName, size, ext, createTime, callback, asyncState);
        }
        
        private object[] OnEndAddFileToDB(System.IAsyncResult result) {
            ((HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF)(this)).EndAddFileToDB(result);
            return null;
        }
        
        private void OnAddFileToDBCompleted(object state) {
            if ((this.AddFileToDBCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFileToDBCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFileToDBAsync(int id, System.Nullable<int> pid, string fileName, long size, string ext, System.DateTime createTime) {
            this.AddFileToDBAsync(id, pid, fileName, size, ext, createTime, null);
        }
        
        public void AddFileToDBAsync(int id, System.Nullable<int> pid, string fileName, long size, string ext, System.DateTime createTime, object userState) {
            if ((this.onBeginAddFileToDBDelegate == null)) {
                this.onBeginAddFileToDBDelegate = new BeginOperationDelegate(this.OnBeginAddFileToDB);
            }
            if ((this.onEndAddFileToDBDelegate == null)) {
                this.onEndAddFileToDBDelegate = new EndOperationDelegate(this.OnEndAddFileToDB);
            }
            if ((this.onAddFileToDBCompletedDelegate == null)) {
                this.onAddFileToDBCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFileToDBCompleted);
            }
            base.InvokeAsync(this.onBeginAddFileToDBDelegate, new object[] {
                        id,
                        pid,
                        fileName,
                        size,
                        ext,
                        createTime}, this.onEndAddFileToDBDelegate, this.onAddFileToDBCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF CreateChannel() {
            return new FolderWCFClientChannel(this);
        }
        
        private class FolderWCFClientChannel : ChannelBase<HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF>, HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF {
            
            public FolderWCFClientChannel(System.ServiceModel.ClientBase<HuaweiSoftware.Folder.FolderWCFReference.IFolderWCF> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAddFileToDB(int id, System.Nullable<int> pid, string fileName, long size, string ext, System.DateTime createTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = id;
                _args[1] = pid;
                _args[2] = fileName;
                _args[3] = size;
                _args[4] = ext;
                _args[5] = createTime;
                System.IAsyncResult _result = base.BeginInvoke("AddFileToDB", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddFileToDB(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddFileToDB", _args, result);
            }
        }
    }
}
